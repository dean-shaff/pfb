import os
import logging
import unittest

import matplotlib.pyplot as plt
import numpy as np
import psr_formats
import comparator

from pfb.pfb_analysis import (
    pfb_analysis,
    calc_output_tsamp,
    channelize_psrformat_file)
from pfb.rational import Rational

current_dir = os.path.dirname(os.path.abspath(__file__))
data_dir = os.path.join(current_dir, "test_data")

fir_file_path = os.path.join(
    data_dir, "Prototype_FIR.8-7.8.80.mat")

input_file_paths = [os.path.join(data_dir, file_name) for file_name in
                    ["complex_sinusoid.dump", "time_domain_impulse.dump"]]

matlab_file_paths = [os.path.join(data_dir, file_name) for file_name in
                     ["polyphase_analysis.complex_sinusoid.dump",
                      "polyphase_analysis.time_domain_impulse.dump"]]


class TestPFBAnalysis(unittest.TestCase):

    def test_pfb_analysis(self):
        analyzer = pfb_analysis(os_factor="8/7",
                                nchan=8,
                                fir_filter_coeff=np.random.rand(10))
        sample_data = np.random.rand(1000) + 1j*np.random.rand(1000)
        analyzer(sample_data)

    def test_calc_output_tsamp(self):
        input_tsamp = 0.025
        output_tsamp = calc_output_tsamp(input_tsamp,
                                         nchan=8,
                                         os_factor="8/7")
        self.assertTrue(np.allclose(output_tsamp, 0.175))


# @unittest.skip
class TestPFBChannelizerValidation(unittest.TestCase):
    """
    Validate PFB against data generated by reference Matlab code
    """
    @classmethod
    def setUpClass(cls):
        comp = comparator.SingleDomainComparator("time")
        comp.operators["diff"] = lambda a, b: a - b
        comp.operators["this"] = lambda a: a

        comp.products["mean"] = np.mean
        comp.products["sum"] = np.sum

        comp.domain = [0, 100]

        cls.comp = comp

    def test_vs_matlab(self):
        os_factor = Rational.from_str('8/7')
        nchan = 8
        channelizer = channelize_psrformat_file(
            fir_filter_coeff=fir_file_path,
            nchan=nchan,
            os_factor=os_factor
        )
        for input_file_path, matlab_file_path in zip(input_file_paths,
                                                     matlab_file_paths):
            input_file = psr_formats.DADAFile(input_file_path).load_data()
            input_file_name = os.path.basename(input_file.file_path)
            matlab_file = psr_formats.DADAFile(matlab_file_path).load_data()
            output_file = channelizer(
                input_file,
                output_dir=data_dir,
                output_file_name=f"pfb_analysis.{input_file_name}",
            )
            res_op, res_prod = self.comp.cartesian(*[
                matlab_file.data.flatten(), output_file.data.flatten()
            ])
            fig, axes = comparator.plot_operator_result(res_op)

            plt.show()


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    logging.getLogger("matplotlib").setLevel(logging.ERROR)
    unittest.main()
